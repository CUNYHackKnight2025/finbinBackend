openapi: 3.0.1
info:
  title: FinBin API
  description: |
    Financial management and budget tracking API for FinBin application.
    This API provides endpoints for user authentication, transaction management,
    savings buckets, financial insights, and AI-powered financial assistance.
  version: '1.0'
  contact:
    name: FinBin Support
    email: support@example.com
  license:
    name: Proprietary
servers:
  - url: https://finbinserver-c7fadze8cwhuf3eu.eastus2-01.azurewebsites.net
    description: Production server
  - url: https://finbin-apim.azure-api.net/finbin
    description: API Management endpoint
  - url: http://localhost:5263
    description: Local development
security:
  - bearerAuth: []

paths:
  /api/auth/register:
    post:
      tags:
        - Authentication
      summary: Register new user
      operationId: registerUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterDTO'
      responses:
        '201':
          description: User created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponseDTO'

  /api/auth/login:
    post:
      tags:
        - Authentication
      summary: Login user
      operationId: loginUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginDTO'
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponseDTO'
        '401':
          $ref: '#/components/responses/Unauthorized'
          
  /api/auth/forgot-password:
    post:
      tags:
        - Authentication
      summary: Request password reset
      operationId: forgotPassword
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ForgotPasswordDTO'
      responses:
        '200':
          description: Password reset email sent
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
              
  /api/auth/verify-reset-token:
    post:
      tags:
        - Authentication
      summary: Verify reset token validity
      operationId: verifyResetToken
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VerifyResetTokenDTO'
      responses:
        '200':
          description: Token validity response
          content:
            application/json:
              schema:
                type: object
                properties:
                  valid:
                    type: boolean
              
  /api/auth/reset-password:
    post:
      tags:
        - Authentication
      summary: Reset password with token
      operationId: resetPassword
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ResetPasswordDTO'
      responses:
        '200':
          description: Password reset successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string

  /api/users/create:
    post:
      tags:
        - Users
      summary: Create a new user
      operationId: createUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '201':
          description: User created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          
  /api/users/{id}:
    get:
      tags:
        - Users
      summary: Get user details
      operationId: getUser
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: User details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          $ref: '#/components/responses/NotFound'

  /api/financial-summary/{userId}:
    get:
      tags:
        - Financial Summary
      summary: Retrieve user's financial summary
      operationId: getFinancialSummary
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Financial summary
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FinancialSummary'
        '404':
          $ref: '#/components/responses/NotFound'
          
  /api/financial-summary/add/{userId}:
    post:
      tags:
        - Financial Summary
      summary: Add financial summary for user
      operationId: addFinancialSummary
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FinancialSummary'
      responses:
        '201':
          description: Financial summary created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FinancialSummary'
                
  /api/financial-summary/update/{userId}:
    put:
      tags:
        - Financial Summary
      summary: Update financial summary
      operationId: updateFinancialSummary
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FinancialSummary'
      responses:
        '200':
          description: Financial summary updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FinancialSummary'
                
  /api/financial-summary/delete/{userId}:
    delete:
      tags:
        - Financial Summary
      summary: Delete financial summary
      operationId: deleteFinancialSummary
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Financial summary deleted
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string

  /api/buckets:
    post:
      tags:
        - Buckets
      summary: Create new savings bucket
      operationId: createBucket
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Bucket'
      responses:
        '201':
          description: Bucket created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Bucket'
        '400':
          $ref: '#/components/responses/BadRequest'

  /api/buckets/{userId}:
    get:
      tags:
        - Buckets
      summary: Get user buckets
      operationId: getUserBuckets
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: List of user's savings buckets
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Bucket'

  /api/buckets/{userId}/{bucketId}:
    get:
      tags:
        - Buckets
      summary: Get bucket by ID
      operationId: getBucket
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: integer
        - name: bucketId
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Bucket details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Bucket'
        '404':
          $ref: '#/components/responses/NotFound'
    put:
      tags:
        - Buckets
      summary: Update bucket
      operationId: updateBucket
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: integer
        - name: bucketId
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Bucket'
      responses:
        '200':
          description: Bucket updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Bucket'
        '404':
          $ref: '#/components/responses/NotFound'
    delete:
      tags:
        - Buckets
      summary: Delete bucket
      operationId: deleteBucket
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: integer
        - name: bucketId
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Bucket deleted
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        '404':
          $ref: '#/components/responses/NotFound'

  /api/buckets/{userId}/{bucketId}/priority:
    put:
      tags:
        - Buckets
      summary: Update bucket priority
      operationId: updateBucketPriority
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: integer
        - name: bucketId
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                newPriorityScore:
                  type: number
                  format: double
      responses:
        '200':
          description: Priority updated
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string

  /api/buckets/{userId}/adjust-expenses:
    get:
      tags:
        - Buckets
      summary: Get expense adjustment suggestions
      operationId: getExpenseAdjustments
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Suggested expense adjustments
          content:
            application/json:
              schema:
                type: object
                properties:
                  suggestions:
                    type: array
                    items:
                      type: object
                      properties:
                        category:
                          type: string
                        currentAmount:
                          type: number
                          format: double
                        suggestedAmount:
                          type: number
                          format: double
                        savings:
                          type: number
                          format: double
                        reason:
                          type: string

  /api/transactions:
    get:
      tags:
        - Transactions
      summary: Get user transactions
      operationId: getTransactions
      responses:
        '200':
          description: List of transactions
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Transaction'
    post:
      tags:
        - Transactions
      summary: Create new transaction
      operationId: createTransaction
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Transaction'
      responses:
        '201':
          description: Transaction created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Transaction'

  /api/transactions/{id}:
    get:
      tags:
        - Transactions
      summary: Get transaction by ID
      operationId: getTransaction
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Transaction details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Transaction'
        '404':
          $ref: '#/components/responses/NotFound'
    put:
      tags:
        - Transactions
      summary: Update transaction
      operationId: updateTransaction
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Transaction'
      responses:
        '200':
          description: Transaction updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Transaction'
        '404':
          $ref: '#/components/responses/NotFound'
    delete:
      tags:
        - Transactions
      summary: Delete transaction
      operationId: deleteTransaction
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Transaction deleted
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        '404':
          $ref: '#/components/responses/NotFound'

  /api/ai-analysis/recommendations/{userId}:
    get:
      tags:
        - AI Analysis
      summary: Get financial recommendations
      operationId: getFinancialRecommendations
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: AI-generated financial recommendations
          content:
            application/json:
              schema:
                type: object

  /api/ai-analysis/income/{userId}:
    get:
      tags:
        - AI Analysis
      summary: Analyze income
      operationId: analyzeIncome
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Income analysis
          content:
            application/json:
              schema:
                type: object

  /api/ai-analysis/expenses/{userId}:
    get:
      tags:
        - AI Analysis
      summary: Analyze expenses
      operationId: analyzeExpenses
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Expense analysis
          content:
            application/json:
              schema:
                type: object

  /api/ai-analysis/summary/{userId}:
    get:
      tags:
        - AI Analysis
      summary: Analyze financial summary
      operationId: analyzeFinancialSummary
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Financial summary analysis
          content:
            application/json:
              schema:
                type: object

  /api/ai-chat/{userId}:
    post:
      tags:
        - AI Chat
      summary: Ask financial question
      operationId: askFinancialQuestion
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                question:
                  type: string
      responses:
        '200':
          description: AI response
          content:
            application/json:
              schema:
                type: object
                properties:
                  answer:
                    type: string

  /api/ai-chat/suggest-adjustments/{userId}:
    post:
      tags:
        - AI Chat
      summary: Suggest budget adjustments
      operationId: suggestBudgetAdjustments
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: AI suggested adjustments
          content:
            application/json:
              schema:
                type: object

  /api/history:
    get:
      tags:
        - History
      summary: Get user history
      operationId: getUserHistory
      responses:
        '200':
          description: List of user history entries
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserHistory'

  /api/history/summaries:
    get:
      tags:
        - History
      summary: Get history summaries
      operationId: getHistorySummaries
      responses:
        '200':
          description: List of history summaries
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/HistorySummary'

  /api/history/summarize:
    post:
      tags:
        - History
      summary: Summarize history period
      operationId: summarizeHistoryPeriod
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                fromDate:
                  type: string
                  format: date-time
                toDate:
                  type: string
                  format: date-time
      responses:
        '200':
          description: History summary created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HistorySummary'

  /api/debug/chat/test:
    post:
      tags:
        - Debug
      summary: Test chat functionality
      operationId: testChat
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                message:
                  type: string
                userId:
                  type: integer
                agentName:
                  type: string
                sessionId:
                  type: string
      responses:
        '200':
          description: Chat response
          content:
            application/json:
              schema:
                type: object

  /api/debug/chat/agents:
    get:
      tags:
        - Debug
      summary: Get available chat agents
      operationId: getChatAgents
      responses:
        '200':
          description: List of available agents
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: JWT Authorization header using the Bearer scheme

  responses:
    BadRequest:
      description: Bad request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    Unauthorized:
      description: Unauthorized
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    NotFound:
      description: Resource not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
            
  schemas:
    RegisterDTO:
      type: object
      required:
        - Name
        - Email
        - Password
      properties:
        Name:
          type: string
        Email:
          type: string
          format: email
        Password:
          type: string
          format: password
    
    LoginDTO:
      type: object
      required:
        - Email
        - Password
      properties:
        Email:
          type: string
          format: email
        Password:
          type: string
          format: password
    
    AuthResponseDTO:
      type: object
      properties:
        Id:
          type: integer
        Name:
          type: string
        Email:
          type: string
        Token:
          type: string
    
    ForgotPasswordDTO:
      type: object
      required:
        - Email
      properties:
        Email:
          type: string
          format: email
          
    VerifyResetTokenDTO:
      type: object
      required:
        - Token
      properties:
        Token:
          type: string
          
    ResetPasswordDTO:
      type: object
      required:
        - Token
        - NewPassword
        - ConfirmPassword
      properties:
        Token:
          type: string
        NewPassword:
          type: string
          format: password
        ConfirmPassword:
          type: string
          format: password
    
    User:
      type: object
      properties:
        Id:
          type: integer
        Name:
          type: string
        Email:
          type: string
          format: email
        PasswordHash:
          type: array
          items:
            type: integer
        PasswordSalt:
          type: array
          items:
            type: integer
        ResetToken:
          type: string
          nullable: true
        ResetTokenExpires:
          type: string
          format: date-time
          nullable: true
        FinancialSummary:
          $ref: '#/components/schemas/FinancialSummary'
          nullable: true
    
    Income:
      type: object
      properties:
        Id:
          type: integer
        Salary:
          type: number
          format: double
        Investments:
          type: number
          format: double
        BusinessIncome:
          type: number
          format: double
        FinancialSummaryId:
          type: integer
    
    Expenses:
      type: object
      properties:
        Id:
          type: integer
        RentMortgage:
          type: number
          format: double
        Utilities:
          type: number
          format: double
        Insurance:
          type: number
          format: double
        LoanPayments:
          type: number
          format: double
        Groceries:
          type: number
          format: double
        Transportation:
          type: number
          format: double
        Subscriptions:
          type: number
          format: double
        Entertainment:
          type: number
          format: double
        FinancialSummaryId:
          type: integer
    
    FinancialSummary:
      type: object
      properties:
        Id:
          type: integer
        SavingsBalance:
          type: number
          format: double
        InvestmentBalance:
          type: number
          format: double
        DebtBalance:
          type: number
          format: double
        UserId:
          type: integer
        Income:
          $ref: '#/components/schemas/Income'
          nullable: true
        Expenses:
          $ref: '#/components/schemas/Expenses'
          nullable: true
        TotalIncome:
          type: number
          format: double
          readOnly: true
        TotalExpenses:
          type: number
          format: double
          readOnly: true
    
    Transaction:
      type: object
      properties:
        Id:
          type: integer
        UserId:
          type: integer
        Amount:
          type: number
          format: double
        Description:
          type: string
        Category:
          type: string
          nullable: true
        TransactionDate:
          type: string
          format: date-time
        Reference:
          type: string
          nullable: true
        Notes:
          type: string
          nullable: true
        IsReconciled:
          type: boolean
    
    Bucket:
      type: object
      properties:
        Id:
          type: integer
        UserId:
          type: integer
        Name:
          type: string
        TargetAmount:
          type: number
          format: double
        CurrentSavedAmount:
          type: number
          format: double
        PriorityScore:
          type: number
          format: double
        Deadline:
          type: string
          format: date-time
        Status:
          type: string
    
    UserHistory:
      type: object
      properties:
        Id:
          type: integer
        UserId:
          type: integer
        Timestamp:
          type: string
          format: date-time
        EventType:
          type: string
        Description:
          type: string
        AdditionalData:
          type: string
          nullable: true
        IsSummarized:
          type: boolean
    
    HistorySummary:
      type: object
      properties:
        Id:
          type: integer
        UserId:
          type: integer
        CreatedAt:
          type: string
          format: date-time
        FromDate:
          type: string
          format: date-time
        ToDate:
          type: string
          format: date-time
        SummaryText:
          type: string
          nullable: true
        SummarizedEntryIds:
          type: string
          nullable: true
    
    Error:
      type: object
      properties:
        code:
          type: string
        message:
          type: string
        details:
          type: array
          items:
            type: object
            properties:
              field:
                type: string
              message:
                type: string